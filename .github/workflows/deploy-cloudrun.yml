name: Deploy to Cloud Run (Terraform)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: ubuntu-latest

    # Needed for WIF (id-token) and to read the repo
    permissions:
      contents: read
      id-token: write

    env:
      PROJECT_ID: ${{ secrets.GCP_PROJECT }}
      REGION: ${{ secrets.GCP_REGION }}
      REPO_ID: ${{ secrets.GAR_REPO }}
      SERVICE_NAME: ${{ secrets.SERVICE_NAME }}
      IMAGE_NAME: chsn-running
      INFRA_DIR: infra/quickstart-cloudrun

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # --------------------
      # Auth (prefer WIF)
      # --------------------
      # B) Preferred: Workload Identity Federation
      - name: Auth with Workload Identity Federation
        if: secrets.GCP_WORKLOAD_IDENTITY_PROVIDER != '' && secrets.GCP_SERVICE_ACCOUNT_EMAIL != ''
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}
          # artifact registry & gcloud will use this access token
          token_format: 'access_token'

      # A) Fallback: Service Account Key JSON (only if provided)
      - name: Auth with Service Account Key (fallback)
        if: secrets.GCP_WORKLOAD_IDENTITY_PROVIDER == '' || secrets.GCP_SERVICE_ACCOUNT_EMAIL == ''
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker "${REGION}-docker.pkg.dev" -q

      - name: Enable docker buildx
        run: docker buildx create --use >/dev/null 2>&1 || true

      - name: Build & Push Image (linux/amd64)
        id: build
        run: |
          set -euo pipefail
          TAG="$(git rev-parse --short HEAD || date +%s)"
          IMAGE="${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPO_ID}/${IMAGE_NAME}:${TAG}"
          echo "IMAGE=${IMAGE}" >> "$GITHUB_OUTPUT"

          docker buildx build \
            --platform linux/amd64 \
            -t "${IMAGE}" \
            --push .

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: ${{ env.INFRA_DIR }}
        run: terraform init -input=false

      - name: Terraform Apply (deploy Cloud Run)
        working-directory: ${{ env.INFRA_DIR }}
        env:
          IMAGE: ${{ steps.build.outputs.IMAGE }}
        run: |
          set -euo pipefail
          terraform apply -auto-approve \
            -var "project_id=${PROJECT_ID}" \
            -var "region=${REGION}" \
            -var "service_name=${SERVICE_NAME}" \
            -var "repo_id=${REPO_ID}" \
            -var "image=${IMAGE}"

      - name: Output Service URL
        working-directory: ${{ env.INFRA_DIR }}
        run: terraform output -raw service_url || true