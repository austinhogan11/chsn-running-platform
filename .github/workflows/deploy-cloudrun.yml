name: Deploy to Cloud Run (Terraform)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    env:
      PROJECT_ID: ${{ secrets.GCP_PROJECT }}
      REGION: ${{ secrets.GCP_REGION }}
      REPO_ID: ${{ secrets.GAR_REPO }}
      SERVICE_NAME: ${{ secrets.SERVICE_NAME }}
      IMAGE_NAME: chsn-running
      INFRA_DIR: infra/quickstart-cloudrun

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ❗ WIF auth (only)
      - name: Auth with Workload Identity
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Verify gcloud auth & project
        run: |
          gcloud auth list
          gcloud config list
          gcloud services list --enabled | grep -E 'run.googleapis.com|artifactregistry.googleapis.com' || true

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker "${REGION}-docker.pkg.dev" -q

      - name: Enable docker buildx
        run: docker buildx create --use >/dev/null 2>&1 || true

      - name: Build & Push Image (linux/amd64)
        id: build
        run: |
          set -euo pipefail
          TAG="$(git rev-parse --short HEAD || date +%s)"
          IMAGE="${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPO_ID}/${IMAGE_NAME}:${TAG}"
          echo "IMAGE=${IMAGE}"
          echo "IMAGE=${IMAGE}" >> $GITHUB_OUTPUT

          docker buildx build \
            --platform linux/amd64 \
            -t "${IMAGE}" \
            --push .

          # Prove the tag exists in AR
          gcloud artifacts docker tags list "${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPO_ID}/${IMAGE_NAME}" \
            --format='table(TAGS,DIGEST,CREATE_TIME)' | head -n 20

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: ${{ env.INFRA_DIR }}
        run: terraform init -input=false -no-color

      - name: Terraform Apply
        working-directory: ${{ env.INFRA_DIR }}
        env:
          IMAGE: ${{ steps.build.outputs.IMAGE }}
        run: |
          set -euo pipefail
          echo "Applying with image = ${IMAGE}"
          terraform apply -auto-approve -no-color \
            -var "project_id=${PROJECT_ID}" \
            -var "region=${REGION}" \
            -var "service_name=${SERVICE_NAME}" \
            -var "repo_id=${REPO_ID}" \
            -var "image=${IMAGE}"

      - name: Output Service URL
        working-directory: ${{ env.INFRA_DIR }}
        run: terraform output -raw service_url || true